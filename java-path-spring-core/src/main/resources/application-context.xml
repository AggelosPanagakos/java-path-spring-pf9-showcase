<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- Define your beans here -->
	<bean id="car"
		  class="gr.codelearn.spring.showcase.core.domain.Car">
	</bean>

	<bean id="bike"
		  class="gr.codelearn.spring.showcase.core.domain.Bike">
	</bean>

	<!-- Setter Injection -->
	<!-- property name="Name of the property in the class, as derived by the setter, Spring will find the correct Setter for it" -->
	<!-- ref="name of the bean as declared in this xml"-->
	<bean name="setterInjectedTravel"
		  class="gr.codelearn.spring.showcase.core.service.SetterInjectedTravelService">
		<property name="vehicle" ref="car"/>
	</bean>

	<!-- Constructor Injection -->
	<!-- constructor-arg index="the indexed position of the constructor arguments to be injected" -->
	<!-- ref="name of the bean as declared in this xml"-->
	<bean name="constructorInjectedTravel"
		  class="gr.codelearn.spring.showcase.core.service.ConstructorInjectedTravelService">
		<constructor-arg index="0" ref="car"/>
	</bean>

	<!-- Autowire: Spring will try to find the appropriate bean from the ones in the application context to satisfy
	the dependency-->

	<!-- Autowire: autowire="byName, byType" It needs a setter to use -->
	<!-- Autowire: autowire="constructor" It needs a constructor to use -->

	<!-- Autowire "byType" needs a bean with the same type (class) as the property in the injecting class-->
	<!-- If both car and bike are present, then Autowire by type will fail, because there are 2 candidate beans of
	type Vehicle. Fix: comment-out one of them, or add a name-->
	<!--	<bean name="autowiredInjectedTravel"-->
	<!--		  class="gr.codelearn.spring.showcase.core.service.AutowiredInjectedTravelService" autowire="byType">-->
	<!--	</bean>-->

	<!--Autowire "byName" needs a bean with the same name as the property in the injecting class.
	 Fix: put a name on the beans above-->
	<!--	<bean name="autowiredInjectedTravel"-->
	<!--		  class="gr.codelearn.spring.showcase.core.service.AutowiredInjectedTravelService" autowire="byName">-->
	<!--	</bean>-->

	<!--Autowire: "constructor" needs beans that fit to the available constructor arguments-->
	<bean name="autowiredInjectedTravel"
		  class="gr.codelearn.spring.showcase.core.service.AutowiredInjectedTravelService" autowire="constructor">
		<constructor-arg index="0" ref="car"/>
	</bean>
	<!--Arguments and ref on constructor are not needed, it autowires them from the available beans,
	but if present will follow the instructions-->
	<!--<constructor-arg index="0" ref="car"/>-->

</beans>

		<!--
				ABOUT AUTOWIRE

				Controls whether bean properties are "autowired".
				This is an automagical process in which bean references don't need
				to be coded explicitly in the XML bean definition file, but rather the
				Spring container works out dependencies. The effective default is "no".

				There are 4 modes:

				1. "no"
				The traditional Spring default. No automagical wiring. Bean references
				must be defined in the XML file via the <ref/> element (or "ref"
				attribute). We recommend this in most cases as it makes documentation
				more explicit.

				Note that this default mode also allows for annotation-driven autowiring,
				if activated. "no" refers to externally driven autowiring only, not
				affecting any autowiring demands that the bean class itself expresses.

				2. "byName"
				Autowiring by property name. If a bean of class Cat exposes a "dog"
				property, Spring will try to set this to the value of the bean "dog"
				in the current container. If there is no matching bean by name, nothing
				special happens.

				3. "byType"
				Autowiring if there is exactly one bean of the property type in the
				container. If there is more than one, a fatal error is raised, and
				you cannot use byType autowiring for that bean. If there is none,
				nothing special happens.

				4. "constructor"
				Analogous to "byType" for constructor arguments. If there is not exactly
				one bean of the constructor argument type in the bean factory, a fatal
				error is raised.
		-->
